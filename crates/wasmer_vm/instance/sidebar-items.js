initSidebarItems({"enum":[["ImportFunctionEnv","A collection of data about host envs used by imported functions."]],"fn":[["check_memory_init_bounds",""],["check_table_init_bounds",""],["get_memory_init_start","Compute the offset for a memory data initializer."],["get_memory_slice","Return a byte-slice view of a memory's data."],["get_table_init_start","Compute the offset for a table element initializer."],["initialize_globals",""],["initialize_memories","Initialize the table memory from the provided initializers."],["initialize_passive_elements","Initialize the `Instance::passive_elements` map by resolving the `ModuleInfo::passive_elements`'s `FunctionIndex`s into `VMCallerCheckedAnyfunc`s for this instance."],["initialize_tables","Initialize the table memory from the provided initializers."]],"mod":[["allocator",""]],"struct":[["Instance","A WebAssembly instance."],["InstanceHandle","A handle holding an `InstanceRef`, which holds an `Instance` of a WebAssembly module."],["InstanceRef","An `InstanceRef` is responsible to properly deallocate, and to give access to an `Instance`, in such a way that `Instance` is unique, can be shared, safely, across threads, without duplicating the pointer in multiple locations. `InstanceRef` must be the only “owner” of an `Instance`."]],"type":[["ImportInitializerFuncPtr","The function pointer to call with data and an [`Instance`] pointer to finish initializing the host env."],["SignalHandler",""]]});